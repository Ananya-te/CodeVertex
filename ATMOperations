import java.util.*;

enum ATMOperation {
    CHECK_BALANCE, WITHDRAW, DEPOSIT, VIEW_HISTORY, EXIT
}

class Transaction {
    private final ATMOperation operation;
    private final double amount;
    private final Date timestamp;

    public Transaction(ATMOperation operation, double amount) {
        this.operation = operation;
        this.amount = amount;
        this.timestamp = new Date();
    }

    
    public String toString() {
        return String.format("%s: %s - $%.2f", timestamp, operation, amount);
    }
}

class BankAccount {
    private double balance;
    private final List<Transaction> transactionHistory;

    public BankAccount(double initialBalance) {
        this.balance = initialBalance;
        this.transactionHistory = new ArrayList<>();
    }

    public double getBalance() {
        return balance;
    }

    public void deposit(double amount) {
        balance += amount;
        transactionHistory.add(new Transaction(ATMOperation.DEPOSIT, amount));
    }

    public boolean withdraw(double amount) {
        if (amount <= balance) {
            balance -= amount;
            transactionHistory.add(new Transaction(ATMOperation.WITHDRAW, amount));
            return true;
        }
        return false;
    }

    public List<Transaction> getTransactionHistory() {
        return new ArrayList<>(transactionHistory);
    }
}

class ATM {
    private final BankAccount account;
    private final Scanner scanner;

    public ATM(BankAccount account) {
        this.account = account;
        this.scanner = new Scanner(System.in);
    }

    public void start() {
        while (true) {
            displayMenu();
            ATMOperation operation = getOperation();
            if (operation == ATMOperation.EXIT) {
                System.out.println("Thank you for using our ATM. Goodbye!");
                break;
            }
            processOperation(operation);
        }
    }

    private void displayMenu() {
        System.out.println("\nATM Menu:");
        System.out.println("1. Check Balance");
        System.out.println("2. Withdraw");
        System.out.println("3. Deposit");
        System.out.println("4. View Transaction History");
        System.out.println("5. Exit");
        System.out.print("Enter your choice: ");
    }

    private ATMOperation getOperation() {
        int choice = scanner.nextInt();
        switch (choice) {
            case 1: return ATMOperation.CHECK_BALANCE;
            case 2: return ATMOperation.WITHDRAW;
            case 3: return ATMOperation.DEPOSIT;
            case 4: return ATMOperation.VIEW_HISTORY;
            case 5: return ATMOperation.EXIT;
            default:
                System.out.println("Invalid option. Please try again.");
                return getOperation();
        }
    }

    private void processOperation(ATMOperation operation) {
        switch (operation) {
            case CHECK_BALANCE:
                checkBalance();
                break;
            case WITHDRAW:
                withdraw();
                break;
            case DEPOSIT:
                deposit();
                break;
            case VIEW_HISTORY:
                viewHistory();
                break;
        }
    }

    private void checkBalance() {
        System.out.printf("Your current balance is: $%.2f\n", account.getBalance());
    }

    private void withdraw() {
        System.out.print("Enter amount to withdraw: $");
        double amount = scanner.nextDouble();
        if (amount <= 0) {
            System.out.println("Invalid amount. Please enter a positive number.");
            return;
        }
        if (account.withdraw(amount)) {
            System.out.printf("Successfully withdrew $%.2f\n", amount);
        } else {
            System.out.println("Insufficient funds. Withdrawal failed.");
        }
    }

    private void deposit() {
        System.out.print("Enter amount to deposit: $");
        double amount = scanner.nextDouble();
        if (amount <= 0) {
            System.out.println("Invalid amount. Please enter a positive number.");
            return;
        }
        account.deposit(amount);
        System.out.printf("Successfully deposited $%.2f\n", amount);
    }

    private void viewHistory() {
        List<Transaction> history = account.getTransactionHistory();
        if (history.isEmpty()) {
            System.out.println("No transactions yet.");
        } else {
            System.out.println("Transaction History:");
            for (Transaction transaction : history) {
                System.out.println(transaction);
            }
        }
    }
}

public class EnhancedATMProgram {
    public static void main(String[] args) {
        BankAccount userAccount = new BankAccount(1000); 
        ATM atm = new ATM(userAccount);
        atm.start();
    }
}
